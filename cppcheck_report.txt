image/image.hpp:78:10: performance:inconclusive: Technically the member function 'Image::writeToEXR' can be static (but you may consider moving to unnamed namespace). [functionStatic]
    void writeToEXR(const string& path) const;
         ^
image/image.cpp:288:13: note: Technically the member function 'Image::writeToEXR' can be static (but you may consider moving to unnamed namespace).
void Image::writeToEXR(const string& path) const {
            ^
image/image.hpp:78:10: note: Technically the member function 'Image::writeToEXR' can be static (but you may consider moving to unnamed namespace).
    void writeToEXR(const string& path) const;
         ^
image/image.hpp:31:63: performance: Function parameter 'data' should be passed by const reference. [passedByValue]
    Image(unsigned int w, unsigned int h, vector<vector<RGB>> data, double max)
                                                              ^
image/tonemapping.cpp:165:24: style: The scope of the variable 'v' can be reduced. [variableScope]
                double v, v1, scale;
                       ^
image/tonemapping.cpp:165:31: style: The scope of the variable 'scale' can be reduced. [variableScope]
                double v, v1, scale;
                              ^
image/tonemapping.cpp:183:67: error: Uninitialized variable: v1 [uninitvar]
                double newLuminance = clampHigh(prevLuminance / ( v1 + 1 ), 1);
                                                                  ^
image/tonemapping.cpp:171:34: note: Assuming condition is false
                    if ( abs(vs) < threshold ) {
                                 ^
image/tonemapping.cpp:183:67: note: Uninitialized variable: v1
                double newLuminance = clampHigh(prevLuminance / ( v1 + 1 ), 1);
                                                                  ^
material/TextureBRDF.cpp:20:92: style:inconclusive: Function 'sampleDiffuse' argument 3 names different: declaration 'it' definition 'n'. [funcArgNamesDifferent]
Vector3 TextureBRDF::sampleDiffuse(const Vector3& omega0, const Vector3& x, const Vector3& n) const {
                                                                                           ^
material/TextureBRDF.hpp:115:83: note: Function 'sampleDiffuse' argument 3 names different: declaration 'it' definition 'n'.
    Vector3 sampleDiffuse(const Vector3& omega0, const Vector3& x, const Vector3& it) const;
                                                                                  ^
material/TextureBRDF.cpp:20:92: note: Function 'sampleDiffuse' argument 3 names different: declaration 'it' definition 'n'.
Vector3 TextureBRDF::sampleDiffuse(const Vector3& omega0, const Vector3& x, const Vector3& n) const {
                                                                                           ^
material/TextureBRDF.cpp:40:93: style:inconclusive: Function 'sampleSpecular' argument 3 names different: declaration 'it' definition 'n'. [funcArgNamesDifferent]
Vector3 TextureBRDF::sampleSpecular(const Vector3& omega0, const Vector3& x, const Vector3& n) const {
                                                                                            ^
material/TextureBRDF.hpp:125:84: note: Function 'sampleSpecular' argument 3 names different: declaration 'it' definition 'n'.
    Vector3 sampleSpecular(const Vector3& omega0, const Vector3& x, const Vector3& it) const;
                                                                                   ^
material/TextureBRDF.cpp:40:93: note: Function 'sampleSpecular' argument 3 names different: declaration 'it' definition 'n'.
Vector3 TextureBRDF::sampleSpecular(const Vector3& omega0, const Vector3& x, const Vector3& n) const {
                                                                                            ^
material/TextureBRDF.cpp:45:95: style:inconclusive: Function 'sampleRefraction' argument 3 names different: declaration 'it' definition 'n'. [funcArgNamesDifferent]
Vector3 TextureBRDF::sampleRefraction(const Vector3& omega0, const Vector3& x, const Vector3& n) const {
                                                                                              ^
material/TextureBRDF.hpp:135:86: note: Function 'sampleRefraction' argument 3 names different: declaration 'it' definition 'n'.
    Vector3 sampleRefraction(const Vector3& omega0, const Vector3& x, const Vector3& it) const;
                                                                                     ^
material/TextureBRDF.cpp:45:95: note: Function 'sampleRefraction' argument 3 names different: declaration 'it' definition 'n'.
Vector3 TextureBRDF::sampleRefraction(const Vector3& omega0, const Vector3& x, const Vector3& n) const {
                                                                                              ^
math/mat4.hpp:24:5: style: Class 'Mat4' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    Mat4(double m[4][4]);
    ^
math/coordinate.hpp:28:5: style: Class 'Coordinate' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    Coordinate(double wCoord) : matrix() { matrix[3][3] = wCoord; }
    ^
math/coordinate.hpp:65:12: style: Class 'Coordinate' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    inline Coordinate(const Mat4 mat) : matrix(mat) {}
           ^
math/vector3.hpp:37:44: performance: Function parameter 'that' should be passed by const reference. [passedByValue]
    inline Vector3 operator+(const Vector3 that) const { return Vector3(x + that.x, y + that.y, z + that.z); }
                                           ^
math/vector3.hpp:45:44: performance: Function parameter 'that' should be passed by const reference. [passedByValue]
    inline Vector3 operator-(const Vector3 that) const { return Vector3(x - that.x, y - that.y, z - that.z);}
                                           ^
math/vector3.hpp:90:38: performance: Function parameter 'v' should be passed by const reference. [passedByValue]
    Vector3 projection(const Vector3 v) const;
                                     ^
math/vector3.hpp:129:26: performance: Function parameter 'u' should be passed by const reference. [passedByValue]
double dot(const Vector3 u, const Vector3 v);
                         ^
math/vector3.hpp:129:43: performance: Function parameter 'v' should be passed by const reference. [passedByValue]
double dot(const Vector3 u, const Vector3 v);
                                          ^
math/vector3.hpp:138:29: performance: Function parameter 'u' should be passed by const reference. [passedByValue]
Vector3 cross(const Vector3 u, const Vector3 v);
                            ^
math/vector3.hpp:138:46: performance: Function parameter 'v' should be passed by const reference. [passedByValue]
Vector3 cross(const Vector3 u, const Vector3 v);
                                             ^
math/vector3.hpp:146:40: performance: Function parameter 'v' should be passed by const reference. [passedByValue]
inline Vector3 normalize(const Vector3 v) { return v.normalized(); }
                                       ^
math/vector3.hpp:154:37: performance: Function parameter 'v' should be passed by const reference. [passedByValue]
Vector3 perpendicular(const Vector3 v);
                                    ^
math/mat4.hpp:32:31: performance: Function parameter 'that' should be passed by const reference. [passedByValue]
    Mat4 operator+(const Mat4 that) const;
                              ^
math/mat4.hpp:40:31: performance: Function parameter 'that' should be passed by const reference. [passedByValue]
    Mat4 operator-(const Mat4 that) const;
                              ^
math/mat4.hpp:48:31: performance: Function parameter 'that' should be passed by const reference. [passedByValue]
    Mat4 operator*(const Mat4 that) const;
                              ^
math/coordinate.hpp:65:34: performance: Function parameter 'mat' should be passed by const reference. [passedByValue]
    inline Coordinate(const Mat4 mat) : matrix(mat) {}
                                 ^
math/coordinate.cpp:10:63: performance: Function parameter 'v' should be passed by const reference. [passedByValue]
Coordinate translation(const Coordinate& coord, const Vector3 v){
                                                              ^
math/coordinate.cpp:66:57: performance: Function parameter 'v' should be passed by const reference. [passedByValue]
Coordinate scale(const Coordinate& coord, const Vector3 v){
                                                        ^
math/coordinate.cpp:77:63: performance: Function parameter 'u' should be passed by const reference. [passedByValue]
Coordinate changeBasis(const Coordinate& coord, const Vector3 u, const Vector3 v, const Vector3 w, const Vector3 o){
                                                              ^
math/coordinate.cpp:77:80: performance: Function parameter 'v' should be passed by const reference. [passedByValue]
Coordinate changeBasis(const Coordinate& coord, const Vector3 u, const Vector3 v, const Vector3 w, const Vector3 o){
                                                                               ^
math/coordinate.cpp:77:97: performance: Function parameter 'w' should be passed by const reference. [passedByValue]
Coordinate changeBasis(const Coordinate& coord, const Vector3 u, const Vector3 v, const Vector3 w, const Vector3 o){
                                                                                                ^
math/coordinate.cpp:77:114: performance: Function parameter 'o' should be passed by const reference. [passedByValue]
Coordinate changeBasis(const Coordinate& coord, const Vector3 u, const Vector3 v, const Vector3 w, const Vector3 o){
                                                                                                                 ^
math/mat4.cpp:13:33: performance: Function parameter 'that' should be passed by const reference. [passedByValue]
Mat4 Mat4::operator+(const Mat4 that) const {
                                ^
math/mat4.cpp:25:33: performance: Function parameter 'that' should be passed by const reference. [passedByValue]
Mat4 Mat4::operator-(const Mat4 that) const {
                                ^
math/mat4.cpp:37:33: performance: Function parameter 'that' should be passed by const reference. [passedByValue]
Mat4 Mat4::operator*(const Mat4 that) const{
                                ^
math/misc.cpp:21:5: performance: Variable 'generator' is assigned in constructor body. Consider performing initialization in initialization list. [useInitializationList]
    generator = std::default_random_engine(rand_dev());
    ^
math/vector3.cpp:39:23: style:inconclusive: Function 'angle' argument 1 names different: declaration 'dir' definition 'dir1'. [funcArgNamesDifferent]
double angle (Vector3 dir1, Vector3 n){
                      ^
math/vector3.hpp:173:22: note: Function 'angle' argument 1 names different: declaration 'dir' definition 'dir1'.
double angle(Vector3 dir, Vector3 n);
                     ^
math/vector3.cpp:39:23: note: Function 'angle' argument 1 names different: declaration 'dir' definition 'dir1'.
double angle (Vector3 dir1, Vector3 n){
                      ^
math/vector3.cpp:14:43: performance: Function parameter 'v' should be passed by const reference. [passedByValue]
Vector3 Vector3::projection(const Vector3 v) const {
                                          ^
math/vector3.cpp:18:26: performance: Function parameter 'u' should be passed by const reference. [passedByValue]
double dot(const Vector3 u, const Vector3 v) {
                         ^
math/vector3.cpp:18:43: performance: Function parameter 'v' should be passed by const reference. [passedByValue]
double dot(const Vector3 u, const Vector3 v) {
                                          ^
math/vector3.cpp:22:29: performance: Function parameter 'u' should be passed by const reference. [passedByValue]
Vector3 cross(const Vector3 u, const Vector3 v) {
                            ^
math/vector3.cpp:22:46: performance: Function parameter 'v' should be passed by const reference. [passedByValue]
Vector3 cross(const Vector3 u, const Vector3 v) {
                                             ^
math/vector3.cpp:26:37: performance: Function parameter 'v' should be passed by const reference. [passedByValue]
Vector3 perpendicular(const Vector3 v) {
                                    ^
math/vector3.cpp:34:22: performance: Function parameter 'dir' should be passed by const reference. [passedByValue]
double delta(Vector3 dir, Vector3 v) {
                     ^
math/vector3.cpp:34:35: performance: Function parameter 'v' should be passed by const reference. [passedByValue]
double delta(Vector3 dir, Vector3 v) {
                                  ^
math/vector3.cpp:39:23: performance: Function parameter 'dir1' should be passed by const reference. [passedByValue]
double angle (Vector3 dir1, Vector3 n){
                      ^
math/vector3.cpp:39:37: performance: Function parameter 'n' should be passed by const reference. [passedByValue]
double angle (Vector3 dir1, Vector3 n){
                                    ^
pathtracer/pathtracing.cpp:153:29: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
                    contrib = contrib + pathTraceRay(sc, r, 0);
                            ^
scene/sceneSamples.hpp:39:16: style: Variable 'pBack' is assigned a value that is never used. [unreadVariable]
    auto pBack = make_shared<Plane> (-4, Vector3(0, 0, 1), gray);
               ^
scene/sceneSamples.hpp:69:13: style: Variable 'sL' is assigned a value that is never used. [unreadVariable]
    auto sL = make_shared<Sphere>(Vector3(-0.5, -0.7, 0.25), 0.3, BRDFL);
            ^
scene/sceneSamples.hpp:70:13: style: Variable 'sR' is assigned a value that is never used. [unreadVariable]
    auto sR = make_shared<Sphere>(Vector3( 0.5, -0.7, -0.25), 0.3, BRDFR);
            ^
scene/sceneSamples.hpp:71:14: style: Variable 'sR4' is assigned a value that is never used. [unreadVariable]
    auto sR4 = make_shared<Sphere>(Vector3(0, -0.2, 0.5), 0.1, BRDFR);
             ^
scene/sceneSamples.hpp:117:19: style: Variable 'emission' is assigned a value that is never used. [unreadVariable]
    auto emission = make_shared<Emitter>(RGB(1,1,1));
                  ^
scene/sceneSamples.hpp:124:16: style: Variable 'pBack' is assigned a value that is never used. [unreadVariable]
    auto pBack = make_shared<Plane> (-4, Vector3(0, 0, 1), gray);
               ^
scene/sceneSamples.hpp:128:14: style: Variable 'sR4' is assigned a value that is never used. [unreadVariable]
    auto sR4 = make_shared<Sphere>(Vector3( 0.3, 0, 0.6), 0.3, BRDFR);
             ^
scene/sceneSamples.hpp:173:22: style: Variable 'fullReflect' is assigned a value that is never used. [unreadVariable]
    auto fullReflect = make_shared<SimpleBRDF>(RGB(0.1, 0.1, 0.1), RGB(0.9, 0.9, 0.9));
                     ^
scene/sceneSamples.hpp:183:16: style: Variable 'pBack' is assigned a value that is never used. [unreadVariable]
    auto pBack = make_shared<Plane> (4, Vector3(0, 0, 1), texture);
               ^
scene/sceneSamples.hpp:187:14: style: Variable 'sR4' is assigned a value that is never used. [unreadVariable]
    auto sR4 = make_shared<Sphere>(Vector3( 0.3, 0, 0.6), 0.3, BRDFR);
             ^
scene/sceneSamples.hpp:235:13: style: Variable 'pB' is assigned a value that is never used. [unreadVariable]
    auto pB = make_shared<Plane> (1, Vector3(0, 0, -1), texture2);
            ^
scene/sceneSamples.hpp:236:13: style: Variable 'pL' is assigned a value that is never used. [unreadVariable]
    auto pL = make_shared<Plane> (1, Vector3(1, 0, 0), texture2);
            ^
photonmapper/photonmapping.cpp:78:24: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
        luminanceTotal += l->power.getLuminance();
                       ^
photonmapper/photonmapping.cpp:223:29: style: Consider using std::accumulate algorithm instead of a raw loop. [useStlAlgorithm]
                    contrib = contrib + traceRay(ray, sc, pmap);
                            ^
photonmapper/photonmapping.cpp:75:17: style: Variable 'lights' is assigned a value that is never used. [unreadVariable]
    auto lights = sc.lights.size();
                ^
renderer.cpp:21:9: style: The scope of the variable 'c' can be reduced. [variableScope]
    int c, digit_optind = 0;
        ^
scene/scene.hpp:34:22: performance: Function parameter 's' should be passed by const reference. [passedByValue]
    Scene(SceneProps s, Camera c, const shared_ptr<Texture<RGB>> tex = nullptr) : cam(c), _scprops(s), _envMap(tex) {};
                     ^
tests/testsuite.hpp:15:5: style: Class 'TestSuite' has a constructor with 1 argument that is not explicit. [noExplicitConstructor]
    TestSuite(std::initializer_list<Test> tests) : _tests(tests) {}
    ^
tests.cpp:118:15: style: Variable 'okCSG' is assigned a value that is never used. [unreadVariable]
    int okCSG = tCSG.runSuite();
              ^
tonemapper.cpp:13:23: performance: Function parameter 'path' should be passed by const reference. [passedByValue]
void ppm(const string path) {
                      ^
tonemapper.cpp:28:23: performance: Function parameter 'path' should be passed by const reference. [passedByValue]
void bmp(const string path) {
                      ^
math/coordinate.cpp:77:0: style: The function 'changeBasis' is never used. [unusedFunction]

^
math/misc.cpp:13:0: style: The function 'clampInterval' is never used. [unusedFunction]

^
image/tonemapping.cpp:62:0: style: The function 'gammaClamp' is never used. [unusedFunction]

^
renderer.cpp:10:0: style: The function 'getSceneProps' is never used. [unusedFunction]

^
math/coordinate.cpp:100:0: style: The function 'inverseTransformation' is never used. [unusedFunction]

^
math/vector3.cpp:14:0: style: The function 'projection' is never used. [unusedFunction]

^
image/image.cpp:188:0: style: The function 'readBMP' is never used. [unusedFunction]

^
image/image.cpp:291:0: style: The function 'readEXR' is never used. [unusedFunction]

^
math/coordinate.cpp:21:0: style: The function 'rotationX' is never used. [unusedFunction]

^
math/coordinate.cpp:36:0: style: The function 'rotationY' is never used. [unusedFunction]

^
math/coordinate.cpp:51:0: style: The function 'rotationZ' is never used. [unusedFunction]

^
photonmapper/photonmapping.cpp:158:0: style: The function 'tracePhotonMapRay' is never used. [unusedFunction]

^
math/coordinate.cpp:10:0: style: The function 'translation' is never used. [unusedFunction]

^
math/mat4.cpp:92:0: style: The function 'transpose' is never used. [unusedFunction]

^
image/image.cpp:288:0: style: The function 'writeToEXR' is never used. [unusedFunction]

^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingIncludeSystem]

